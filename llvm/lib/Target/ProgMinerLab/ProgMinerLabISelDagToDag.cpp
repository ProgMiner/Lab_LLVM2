#include "ProgMinerLabISelDagToDag.h"

#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/Function.h"

#include "MCTargetDesc/ProgMinerLabMCTargetDesc.h"
#include "ProgMinerLabTargetMachine.h"


#define DEBUG_TYPE "ProgMinerLab-isel"


using namespace llvm;


namespace {

class ProgMinerLabDAGToDAGISel : public SelectionDAGISel {

    const ProgMinerLabSubtarget * Subtarget = nullptr;

public:

    static char ID;

    ProgMinerLabDAGToDAGISel() = delete;

    explicit ProgMinerLabDAGToDAGISel(ProgMinerLabTargetMachine & tm): SelectionDAGISel(ID, tm) {}

    bool runOnMachineFunction(MachineFunction & MF) override {
        Subtarget = &MF.getSubtarget<ProgMinerLabSubtarget>();

        return SelectionDAGISel::runOnMachineFunction(MF);
    }

    bool SelectMemAddr(SDValue Addr, SDValue & Base) {
        if (auto * FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
            Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
        } else {
            Base = Addr;
        }

        return true;
    }

    void Select(SDNode * Node) override {
        if (Node->isMachineOpcode()) {
            LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
            Node->setNodeId(-1);
            return;
        }

        SDLoc DL(Node);
        SelectCode(Node);
    }

    StringRef getPassName() const override {
        return "ProgMinerLab DAG->DAG Pattern Instruction Selection";
    }

// include the pieces autogenerated from the target description
#include "ProgMinerLabGenDAGISel.inc"

};

} // anonymous namespace

char ProgMinerLabDAGToDAGISel::ID = 0;

// this pass converts a legalized DAG into a ProgMinerLab-specific DAG,
// ready for instruction scheduling
FunctionPass * llvm::createProgMinerLabISelDag(ProgMinerLabTargetMachine & TM) {
    return new ProgMinerLabDAGToDAGISel(TM);
}
